if {![namespace exists ::IMEX]} { namespace eval ::IMEX {} }
set ::IMEX::dataVar [file dirname [file normalize [info script]]]
set ::IMEX::libVar ${::IMEX::dataVar}/libs

catch { setDesignMode -process 180 }
catch { setAnalysisMode -analysisType onChipVariation }
catch { setAnalysisMode -checkType setup }
catch { setAnalysisMode -clkSrcPath true }
catch { setAnalysisMode -clockGatingCheck true }
catch { setAnalysisMode -clockPropagation sdcControl }
catch { setAnalysisMode -cppr none }
catch { setAnalysisMode -enableMultipleDriveNet true }
catch { setAnalysisMode -log true }
catch { setAnalysisMode -sequentialConstProp false }
catch { setAnalysisMode -skew true }
catch { setAnalysisMode -timeBorrowing true }
catch { setAnalysisMode -timingSelfLoopsNoSkew false }
catch { setAnalysisMode -usefulSkew true }
catch { setAnalysisMode -useOutputPinCap true }
catch { setAnalysisMode -virtualIPO false }
catch { setAnalysisMode -warn true }
catch { setOptMode -activeHoldViews { av_func_mode_min } }
catch { setOptMode -activeSetupViews { av_func_mode_max } }
catch { setOptMode -autoHoldViews { av_func_mode_min} }
catch { setOptMode -autoSetupViews { av_func_mode_max} }
catch { setOptMode -autoTDGRSetupViews { av_func_mode_max} }
catch { setOptMode -autoViewHoldTargetSlack 0 }
catch { setOptMode -autoViewOpt false }
catch { setOptMode -deleteInst true }
catch { setOptMode -drcMargin 0 }
catch { setOptMode -fixCap true }
catch { setOptMode -fixDrc true }
catch { setOptMode -fixFanoutLoad true }
catch { setOptMode -fixTran true }
catch { setOptMode -optimizeFF true }
catch { setOptMode -preserveAllSequential false }
catch { setOptMode -setupTargetSlack 0 }
catch { setPathGroupOptions reg2reg -effortLevel high -weight 2 }
catch { setPathGroupOptions default -effortLevel low }
catch { setExtractRCMode  -lefTechFileMap Library/layermap/qrc_lefdef.layermap -effortLevel high -engine postRoute -total_c_th 5 -relative_c_th 0.03 -coupling_c_th 3 -capFilterMode relOnly }
catch {setNanoRouteMode -quiet -drouteEndIteration 20}
catch {setNanoRouteMode -quiet -drouteStartIteration 0}
catch {setNanoRouteMode -quiet -drouteUseLefPinTaperRule true}
catch {setNanoRouteMode -quiet -drouteUseMinSpacingForBlockage auto}
catch {setNanoRouteMode -quiet -extractRcModelFile "${::IMEX::libVar}/misc/rc_model.bin"}
catch {setNanoRouteMode -quiet -extractThirdPartyCompatible false}
catch {setNanoRouteMode -quiet -grouteExpTdStdDelay 52.100000}
catch {setNanoRouteMode -quiet -grouteExpTdUseTifTimingEngineForImportDesign false}
catch {setNanoRouteMode -quiet -routeAntennaCellName "ANTENNA"}
catch {setNanoRouteMode -quiet -routeBottomRoutingLayer 1}
catch {setNanoRouteMode -quiet -routeExpDirtyAreaEco false}
catch {setNanoRouteMode -quiet -routeExpSignatureEco false}
catch {setNanoRouteMode -quiet -routeInsertAntennaDiode true}
catch {setNanoRouteMode -quiet -routeStrictlyHonorNonDefaultRule "false"}
catch {setNanoRouteMode -quiet -routeTdrEffort 10}
catch {setNanoRouteMode -quiet -routeTopRoutingLayer 6}
catch {setNanoRouteMode -quiet -routeWithSiDriven true}
catch {setNanoRouteMode -quiet -routeWithSiPostRouteFix false}
catch {setNanoRouteMode -quiet -routeWithTimingDriven true}
catch {setNanoRouteMode -quiet -timingEngine ""}

catch { setPlaceMode -place_design_floorplan_mode false }
catch { setPlaceMode -place_detail_preroute_as_obs {2 3} }
catch { setIlmMode -keepHighFanoutPorts true -keepLoopBack false -keepInstInSdc false -keepFlatten true }
catch { setUsefulSkewMode -ecoRoute false }
catch { setSrouteMode -viaConnectToShape {ring stripe} }
catch { set_verify_drc_mode -area {0 0 0 0} }
catch { set_verify_drc_mode -check_ndr_spacing auto }
catch { set_verify_drc_mode -check_only default }
catch { set_verify_drc_mode -check_same_via_cell false }
catch { set_verify_drc_mode -disable_rules "" }
catch { set_verify_drc_mode -exclude_pg_net false }
catch { set_verify_drc_mode -ignore_cell_blockage false }
catch { set_verify_drc_mode -ignore_trial_route false }
catch { set_verify_drc_mode -limit 1000 }
catch { set_verify_drc_mode -report ${::IMEX::libVar}/misc/CHIP.drc.rpt }
catch { set_verify_drc_mode -use_min_spacing_on_block_obs auto }
catch { setDelayCalMode -enable_high_fanout true }
catch { setDelayCalMode -eng_copyNetPropToNewNet true }
catch { setDelayCalMode -engine aae }
catch { setDelayCalMode -ignoreNetLoad false }
catch { setDelayCalMode -SIAware true }
catch { setDelayCalMode -signOff true }
catch { setDelayCalMode -socv_accuracy_mode low }
catch { setAddRingMode -avoid_short false }
catch { setAddRingMode -extend_over_row false }
catch { setAddRingMode -ignore_rows false }
catch { setAddRingMode -orthogonal_only true }
catch { setAddRingMode -ring_target default }
catch { setAddRingMode -skip_crossing_trunks none }
catch { setAddRingMode -skip_via_on_pin standardcell }
catch { setAddRingMode -skip_via_on_wire_shape noshape }
catch { setAddRingMode -stacked_via_bottom_layer met1 }
catch { setAddRingMode -stacked_via_top_layer met6 }
catch { setAddRingMode -via_using_exact_crossover_size true }
catch { setHierMode -disableArt false }
catch { setHierMode -reportPostRouteArtTiming false }
catch { setHierMode -trialRouteHonorReadOnly false }
catch { setImportMode -discardFloatingVNets false }
catch { setImportMode -keepEmptyModule true }
catch { setSIMode -analysisType aae }
catch { setSIMode -enable_glitch_report false }
catch { setSIMode -separate_delta_delay_on_data true }
catch { setAddStripeMode -allow_jog {padcore_ring block_ring} }
catch { setAddStripeMode -break_at none }
catch { setAddStripeMode -extend_to_closest_target none }
catch { setAddStripeMode -ignore_block_check false }
catch { setAddStripeMode -ignore_nondefault_domains false }
catch { setAddStripeMode -orthogonal_only true }
catch { setAddStripeMode -partial_set_thru_domain false }
catch { setAddStripeMode -route_over_rows_only false }
catch { setAddStripeMode -rows_without_stripes_only false }
catch { setAddStripeMode -skip_via_on_pin standardcell }
catch { setAddStripeMode -skip_via_on_wire_shape noshape }
catch { setAddStripeMode -spacing_from_block 0 }
catch { setAddStripeMode -spacing_type edge_to_edge }
catch { setAddStripeMode -split_vias false }
catch { setAddStripeMode -stacked_via_bottom_layer met1 }
catch { setAddStripeMode -stacked_via_top_layer met6 }
catch { setAddStripeMode -stop_at_last_wire_for_area false }
catch { setAddStripeMode -stripe_min_length stripe_width }
catch { setAddStripeMode -trim_antenna_back_to_shape none }
catch { setAddStripeMode -via_using_exact_crossover_size false }
catch { setRouteMode -earlyGlobalRouteSecondPG false }
catch { setFPlanMode -defaultTechSite umc6site }
catch { setFPlanMode -maxIoHeight false }
catch { setFPlanMode -powerRailLayer {} }
